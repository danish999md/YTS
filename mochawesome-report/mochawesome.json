{
  "stats": {
    "suites": 4,
    "tests": 3,
    "passes": 0,
    "pending": 0,
    "failures": 3,
    "start": "2024-01-20T14:16:56.733Z",
    "end": "2024-01-20T14:16:56.768Z",
    "duration": 35,
    "testsRegistered": 3,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac96fea9-da9a-4fb5-9750-2fde0b12f922",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50fd0212-e322-47fc-81ff-8a7bfab01fea",
          "title": "Subscribers API",
          "fullFile": "C:\\Users\\91979\\Documents\\GET-YOUTUBE-SUBSCRIBERS\\__tests__\\tests.js",
          "file": "\\__tests__\\tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e17628ab-2f7a-4e3d-a2e0-680227a0d159",
              "title": "GET /subscribers",
              "fullFile": "C:\\Users\\91979\\Documents\\GET-YOUTUBE-SUBSCRIBERS\\__tests__\\tests.js",
              "file": "\\__tests__\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get a list of all subscribers",
                  "fullTitle": "Subscribers API GET /subscribers should get a list of all subscribers",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .get('/subscribers')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('array');\n    done();\n  });",
                  "err": {
                    "message": "TypeError: app.address is not a function",
                    "estack": "TypeError: app.address is not a function\n    at serverAddress (node_modules\\chai-http\\lib\\request.js:282:18)\n    at new Test (node_modules\\chai-http\\lib\\request.js:271:53)\n    at obj.<computed> [as get] (node_modules\\chai-http\\lib\\request.js:239:14)\n    at Context.<anonymous> (__tests__\\tests.js:14:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "b7a3b8f3-e5ad-48ae-879a-e7f989bc93af",
                  "parentUUID": "e17628ab-2f7a-4e3d-a2e0-680227a0d159",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "b7a3b8f3-e5ad-48ae-879a-e7f989bc93af"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "b95125d3-a093-4b0d-a0cb-b66ce963a522",
              "title": "GET /subscribers/names",
              "fullFile": "C:\\Users\\91979\\Documents\\GET-YOUTUBE-SUBSCRIBERS\\__tests__\\tests.js",
              "file": "\\__tests__\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get names and subscribed channels for each subscriber",
                  "fullTitle": "Subscribers API GET /subscribers/names should get names and subscribed channels for each subscriber",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "chai.request(app)\n  .get('/subscribers/names')\n  .end((err, res) => {\n    if (err) return done(err);\n    expect(res).to.have.status(200);\n    expect(res.body).to.be.an('array');\n    // Add more assertions as needed\n    done();\n  });",
                  "err": {
                    "message": "TypeError: app.address is not a function",
                    "estack": "TypeError: app.address is not a function\n    at serverAddress (node_modules\\chai-http\\lib\\request.js:282:18)\n    at new Test (node_modules\\chai-http\\lib\\request.js:271:53)\n    at obj.<computed> [as get] (node_modules\\chai-http\\lib\\request.js:239:14)\n    at Context.<anonymous> (__tests__\\tests.js:27:10)\n    at process.processImmediate (node:internal/timers:478:21)",
                    "diff": null
                  },
                  "uuid": "8c46bf0b-48b7-419b-9ca5-dcb65b50e08a",
                  "parentUUID": "b95125d3-a093-4b0d-a0cb-b66ce963a522",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "8c46bf0b-48b7-419b-9ca5-dcb65b50e08a"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            },
            {
              "uuid": "13188da2-dbb9-4f1b-a9a1-a11f28a767f9",
              "title": "GET /subscribers/:id",
              "fullFile": "C:\\Users\\91979\\Documents\\GET-YOUTUBE-SUBSCRIBERS\\__tests__\\tests.js",
              "file": "\\__tests__\\tests.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get subscriber information by ID",
                  "fullTitle": "Subscribers API GET /subscribers/:id should get subscriber information by ID",
                  "timedOut": false,
                  "duration": 20,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// Fetch a subscriber document from the collection\nconst subscriber = await Subscriber.findOne();\n// Make sure a subscriber document was found\nif (!subscriber) {\n  throw new Error('No subscriber documents found in the collection.');\n}\n// Get the _id from the fetched subscriber document\nconst subscriberId = subscriber._id.toString();\n// Making the actual request using chai-http\nconst response = await chai.request(app).get(`/subscribers/${subscriberId}`);\n\n// Assertions\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('_id', subscriberId);\n// Add more assertions as needed",
                  "err": {
                    "message": "TypeError: app.address is not a function",
                    "estack": "TypeError: app.address is not a function\n    at serverAddress (node_modules\\chai-http\\lib\\request.js:282:18)\n    at new Test (node_modules\\chai-http\\lib\\request.js:271:53)\n    at obj.<computed> [as get] (node_modules\\chai-http\\lib\\request.js:239:14)\n    at Context.<anonymous> (__tests__\\tests.js:54:48)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                    "diff": null
                  },
                  "uuid": "40060128-8478-4ed9-81bc-3233817eedc9",
                  "parentUUID": "13188da2-dbb9-4f1b-a9a1-a11f28a767f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "40060128-8478-4ed9-81bc-3233817eedc9"
              ],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 60000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}